JS - minhas soluções de funcionalidades ao Challenge Decodificador de Texto

Referência:

- MDN - funções
    https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions

- W3Schools - arrow function
    https://www.w3schools.com/js/js_arrow_function.asp

- Tutorial - transformar em arrow function
    vídeo - https://youtu.be/_kCCmAFa2Zk


    1. Funções auxiliares - para simplificar o código
    ==================================================
        1.1. buscaId - busca elemento HTML pelo ID
        1.2. copiaMemo - copia para memória o valor de um objeto
        1.3. limpaArea - limpa o valor de um objeto


    2. Funções dos botões
    =====================
        2.1.    codificar
        2.2.    decodificar
        2.3.    copiar
        2.4.    colar
        2.5.    refresh



1.  Funções auxiliares
======================


1.1. buscaId
============

    - Simplifica o método de buscar elemento HTML pelo ID

        function buscaId(b){
            return document.getElementById(b);
        }

    - o seu uso seria assim para buscar o elemento HTML "saida":

        buscaId('saida');


1.1.1.  buscaId em versão arrow-function
========================================

    Como declarar em arrow-function uma função normal:

    - transformar o nome da função em uma variável do tipo "let";
    - omitir a palavra-chave "function";
    - atribuir à variável o parâmetro da função "(b)"
      neste caso, por ter apenas 1 parâmetro, pode omitir os parênteses (),
      mantendo apenas o valor do parãmentro "b";
    - acrescentar o sinal da seta "=>" entre o parâmetro e o bloco de instruções;
    - declarar a instrução da função sem abrir e fechar chaves "{}";
    - em geral, nas funções do tipo arrow o termo "return" pode ser omitido.

    |------------------------------------------------------------------------|

                - função normal
                
                function buscaId(b){
                    return document.getElementById(b);
                }
        

        - função do tipo arrow

        let buscaId = b => document.getElementById(b);
        --- ------- - - -- ---------------------------
         |     |    | |  |          |
         |     |    | |  |          |_- instrução da função [sem o "return"]
         |     |    | |  |
         |     |    | |  |_- sinal da seta [indica a função do tipo "arrow"]
         |     |    | |
         |     |    | |_- parâmetro da função [por ser só 1, não precisa ()]
         |     |    |
         |     |    |_- sinal de atribuição
         |     |
         |     |_- nome da função é transformado em nome da variável
         |
         |_- declaração de variável do tipo "let" [não pode alterar valor]

    |------------------------------------------------------------------------|



1.2. copiaMemo
==============

    - Simplifica a declaração da API "clipboard" com a interface "navigator"
      para armazenar na memória o valor de um objeto

	    function copiaMemo(m){
		    return navigator.clipboard.writeText(m.value);
	    }

    - seu uso seria assim para copiar o texto da variável copia:

        copiaMemo(copia);


1.2.1.  copiaMemo em versão arrow-function
==========================================

        let copiaMemo = m => navigator.clipboard.writeText(m.value);



1.3. limpaArea
===============

    - transforma em função o comando de limpar o campo de texto do HTML,
      utilizando o método para buscar elemento HTML pelo ID
      e atribuindo a seu valor uma String vazia

        function limpaArea(a){
	        buscaId(a).value='';
        }

    - o seu uso seria assim no código para limpar o campo HTML "saida":

        limpaArea('saida');


1.3.1.  limpaAreaem versão arrow-function
=========================================

        let limpaArea = a => buscaId(a).value='';



2.  Funções dos botões
======================


2.1.    Codificar
=================

    - busca o elemento HTML pelo ID e cria variável
      para receber o valor deste elemento;

    - rearmazena na mesma variável a verificação de caracteres indevidos,
      utilizando os métodos:
        - .normalize() - decomposição do texto em caracteres separados
        - .replace() - troca caracteres indevidos por conteúdo vazio
        - .toLowerCase() - transforma tudo em minúscula;

    - codifica o conteúdo da variável, seguindo a exata ordem de substituição
      realizada pelo método "replace" e rearmazena na mesma variável;
 
    - busca elemento HTML e exibe como valor o conteúdo da variável;

    - limpa o elemento HTML de entrada de dados e encerra a ação do botão.

	    function codificar(){
		    var doc = buscaId('entrada').value;

		    doc = doc
			    .normalize('NFD')
			    .replace(/[^a-zA-Z\s]/g, "")
			    .toLowerCase();

        //	só nesta ordem codifica e decodifica corretamente
		    doc = doc.replace(/e/g, 'enter');
		    doc = doc.replace(/i/g, 'imes');
		    doc = doc.replace(/a/g, 'ai');
		    doc = doc.replace(/o/g, 'ober');
		    doc = doc.replace(/u/g, 'ufat');

		    buscaId('saida').value = doc;
		    limpaArea('entrada');
	    }


2.1.1.  Codificar em versão arrow-function
==========================================

    - por não ter parâmentro é necessário o uso dos () vazio;
    - por ter multiplas instruções é necessário o uso das {}.

        let codificar = () => {
            var doc = buscaId('entrada').value;

            doc = doc.normalize('NFD')
                     .replace(/[^a-zA-Z\s]/g, "")
                     .toLowerCase();

		    doc = doc.replace(/e/g, 'enter');
		    doc = doc.replace(/i/g, 'imes');
		    doc = doc.replace(/a/g, 'ai');
		    doc = doc.replace(/o/g, 'ober');
		    doc = doc.replace(/u/g, 'ufat');

		    buscaId('saida').value = doc;
		    limpaArea('entrada');

        }



2.2.    Decodificar
===================

    - repete o processo Codificar, invertendo a susbstituição de caracteres;
    - não analisa caracretes indevidos.

	function decodificar(){

		var doc = buscaId('entrada').value;

		doc = doc.replace(/enter/g, 'e');
		doc = doc.replace(/imes/g, 'i');
		doc = doc.replace(/ai/g, 'a');
		doc = doc.replace(/ober/g, 'o');
		doc = doc.replace(/ufat/g, 'u');

		buscaId('saida').value = doc;
		limpaArea('entrada');
	}

2.2.1.  Decodificar em versão arrow-function
============================================

	    let decodificar = () => {

		    var doc = buscaId('entrada').value;

    //	só nesta ordem codifica e decodifica corretamente
		    doc = doc.replace(/enter/g, 'e');
		    doc = doc.replace(/imes/g, 'i');
		    doc = doc.replace(/ai/g, 'a');
		    doc = doc.replace(/ober/g, 'o');
		    doc = doc.replace(/ufat/g, 'u');

		    buscaId('saida').value = doc;
		    limpaArea('entrada');
	    }




2.3.    Copiar
==============

    - automatiza a cópia de texto e limpeza do conteúdo do elemento HTML,
      criando variável para armazenar texto copiado.

        function copiar(){
            var cop = buscaId('saida');
            copiaMemo(cop);
            limpaArea('saida');
        }


2.3.1   Copiar em versão arrow-function
=======================================

        let copiar = () => 
            var cop = buscaId('saida'),
            copiaMemo(cop),
            limpaArea('saida');
        


2.4.    Colar
=============

        const btnColar = buscaId('colar');
        const textSaida = buscaId('saida');

        btnColar.addEventListener('click', async (e) => {
	        const colar = await navigator.clipboard.readText();
		    textSaida.value = colar;
		    alert('Clique em OK para colar a mensagem.');
	    });
            

            copiaMemo(cola);
            limpaArea('saida');
        }


    - Receber elementos do HTML e armazenar em constantes:

	    const btnColar = buscaId('.colar');
	    const textSaida = buscaId('.saida');

    - Aguardar click do usuário - botão colar:

	    btnColar.addEventListener('click', async (e) => {
		    const colar = await navigator.clipboard.readText();
		    textSaida.value = colar;
		    alert('Clique em OK! e a mensagem copiada será colada na área indicada.');
	    });


2.5.    Refresh
===============

    - chamar o elemento HTML e armazenar em uma constante:

    	const btnRefresh = buscaId('refresh');

    - chamar constante e adicionar evento
      com função anônima para recarregar a página:

	    btnRefresh.addEventListener('click', () => {
		    location.reload(true);
	    } );






---
.fim
